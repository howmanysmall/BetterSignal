"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[446],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,f=u["".concat(s,".").concat(m)]||u[m]||p[m]||r;return n?i.createElement(f,o(o({ref:t},d),{},{components:n})):i.createElement(f,o({ref:t},d))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var c=2;c<r;c++)o[c]=n[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},59576:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var i=n(87462),a=(n(67294),n(3905));const r={sidebar_position:3},o="Justification",l={unversionedId:"justification",id:"justification",title:"Justification",description:"Alright, I know that there are TOO many Signal modules, so that's why I've decided to add this justification page.",source:"@site/docs/justification.md",sourceDirName:".",slug:"/justification",permalink:"/BetterSignal/docs/justification",draft:!1,editUrl:"https://github.com/howmanysmall/BetterSignal/edit/main/docs/justification.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"defaultSidebar",previous:{title:"Installation",permalink:"/BetterSignal/docs/installation"}},s={},c=[{value:"Differences from <code>sleitnick/signal</code>",id:"differences-from-sleitnicksignal",level:2}],d={toc:c},u="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"justification"},"Justification"),(0,a.kt)("p",null,"Alright, I know that there are TOO many Signal modules, so that's why I've decided to add this justification page."),(0,a.kt)("h2",{id:"differences-from-sleitnicksignal"},"Differences from ",(0,a.kt)("inlineCode",{parentName:"h2"},"sleitnick/signal")),(0,a.kt)("p",null,"I've added quite a few different things compared to the module this was based on. I'll list them here."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--!native")," - My module is running in native mode. This does in fact make a difference for performance, even if it is a minor one."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--!strict")," - I've retyped the entire thing so it works on strict mode."),(0,a.kt)("li",{parentName:"ul"},"New features - I have actually added a lot of new features to the library.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Connection.disconnect")," - Back when I was working at Ping/Crime Kitchen, a lot of things were using ",(0,a.kt)("inlineCode",{parentName:"li"},"disconnect"),", so I added that for consistency reasons."),(0,a.kt)("li",{parentName:"ul"},"Better types - I got really used to having the parameter names like how TypeScript would allow, so I added a ",(0,a.kt)("inlineCode",{parentName:"li"},"Function")," parameter to the ",(0,a.kt)("inlineCode",{parentName:"li"},"Signal")," type which allows you to specify it. It is unfortunately more work to do, but the ",(0,a.kt)("inlineCode",{parentName:"li"},"ClassicSignal")," type does exist for this."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Signal.IsConnectedTo")," - There was no way for me to check if something was connected to the signal, so I added this function. You probably won't need it though."),(0,a.kt)("li",{parentName:"ul"},"Removed the unnecessary ultra strict metatables - I don't think this was necessary. It is a weird design choice."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Signal.FireDeferredUnsafe")," - There was technically a way to make ",(0,a.kt)("inlineCode",{parentName:"li"},"Signal.FireDeferred")," faster, so I implemented it as an unsafe function. Don't know if it's exactly the same, but it should be."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Signal.FireBindable")," - Sometimes, you do want to replicate how a ",(0,a.kt)("inlineCode",{parentName:"li"},"BindableEvent")," would behave in the current ",(0,a.kt)("inlineCode",{parentName:"li"},"SignalBehavior")," mode, so I added this."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Signal.FireBindableUnsafe")," - Same justification."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Signal.DebugMode")," - I just really don't like unnecessary output logging in ",(0,a.kt)("inlineCode",{parentName:"li"},"Signal.DisconnectAll"),", so I made this optional property to toggle it."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Signal.Destroy")," - This actually sets the metatable to nil now. Consistent with all my other stuff."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Signal.instanceof")," - Another holdover from TypeScript."))),(0,a.kt)("li",{parentName:"ul"},"Performance optimizations - I did optimize this a bit. Should be a bit faster than the original library, and maybe faster than the other Signal libraries.")))}p.isMDXComponent=!0}}]);